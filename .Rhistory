runApp()
runApp()
runApp()
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
combineData <- function(sample_data_path, counts_data_path) {
# Read the sample information file
sample_info <- read.csv(sample_data_path)
# Read the normalized counts file
counts <- read.csv(counts_data_path, row.names = 1, check.names = FALSE)
# Make sure that the sample IDs are characters for correct merging
sample_info$SampleID <- as.character(sample_info$SampleID)
colnames(counts) <- as.character(colnames(counts))
# Transpose the counts data first
transposed_counts <- as.data.frame(t(counts))
# Merge the two data frames based on the SampleID column
merged_data <- merge(sample_info, transposed_counts, by.x = "SampleID", by.y = "row.names", all.x = TRUE)
return(merged_data)
}
testdata <- combineData("591_proj_metadata.csv", "591_proj_counts.csv")
counts <- read.csv("591_proj_counts.csv")
counts <- read.csv("591_proj_counts.csv")
counts
sample <- read.csv("591_proj_metadata.csv")
sample
sample <- read.csv("591_metadata.csv")
sample
# Assuming 'Sample.ID' is the common column in both data frames
merged_data <- left_join(sample_data, counts_data, by = c("Sample.ID" = "Column1"))
# Specify the file path
library(tidyverse)
# Specify the file path
library(tidyverse)
# Read the data into a data frame
# Assuming 'Sample.ID' is the common column in both data frames
merged_data <- left_join(sample_data, counts_data, by = c("Sample.ID" = "Column1"))
# Assuming 'Sample.ID' is the common column in both data frames
merged_data <- left_join(sample, counts,by = c("Sample.ID" = "Column1"))
# Transpose the counts columns
transposed_counts <- t(merged_data[, -(1:11)])
# Create a new data frame with transposed counts and Sample.ID
final_data <- data.frame(Sample.ID = merged_data$Sample.ID, transposed_counts)
# Print or use final_data as needed
print(final_data)
# Assuming 'Sample.ID' is the common column in both data frames
merged_data <- left_join(sample, counts,by = c("Sample.ID" = "Column1"))
# Reshape the counts data
reshaped_counts <- merged_data %>%
gather(key = "Count_Type", value = "Count", -Sample.ID) %>%
select(-Count_Type)
# Transpose the counts columns
transposed_counts <- spread(reshaped_counts, Sample.ID, Count)
counts <- read.csv("591_proj_counts.csv")
# Transpose the data frame
transposed_counts <- t(counts)
# Print the transposed data frame
print(transposed_counts)
counts <- read.csv("591_proj_counts.csv")
# Transpose the data frame
transposed_counts <- t(counts)
transposed_counts
counts <- read.csv("591_proj_counts.csv")
# Transpose the data frame
transposed_counts <- t(counts)
# Write the transposed data frame to a new CSV file
write.csv(transposed_counts, file = "transposed_counts.csv", row.names = FALSE)
runApp()
counts <- read.csv("591_proj_counts.csv")
# Read CSV file into a data frame
counts <- read.csv("591_proj_counts.csv", header = TRUE)
# Specify the gene name you are looking for
gene_name <- "ENSG00000265710.1"
# Find the row index where the gene name matches in the first column
gene_row_index <- which(counts$column1 == gene_name)
# Check if the gene was found
if (length(gene_row_index) > 0) {
# Extract the specific row based on the gene name
gene_row <- counts[gene_row_index, ]
# Transpose the data, keeping all indices
transposed_gene_row <- t(gene_row)
# Print the transposed data
print(transposed_gene_row)
} else {
# If the gene was not found, print a message
cat("Gene not found in the data.\n")
}
counts <- read.csv("591_proj_counts.csv")
# Read CSV file into a data frame
counts <- read.csv("591_proj_counts.csv", header = TRUE)
# Specify the gene name you are looking for
gene_name <- "ENSG00000000003.10"
# Find the row index where the gene name matches in the first column
gene_row_index <- which(counts$column1 == gene_name)
# Check if the gene was found
if (length(gene_row_index) > 0) {
# Extract the specific row based on the gene name
gene_row <- counts[gene_row_index, ]
# Transpose the data, keeping all indices
transposed_gene_row <- t(gene_row)
# Print the transposed data
print(transposed_gene_row)
} else {
# If the gene was not found, print a message
cat("Gene not found in the data.\n")
}
runApp()
runApp()
counts <- read.csv("591_proj_counts.csv",row.names = 1, check.names = FALSE)
counts
counts <- read.csv("591_proj_counts.csv",row.names = 1, check.names = FALSE)
counts
counts <- read.csv("591_proj_counts.csv", check.names = FALSE)
counts
counts <- read.csv("591_proj_counts.csv",row.names = 1)
counts
counts <- read.csv("591_proj_counts.csv",row.names = 1)
#counts
transposed_counts <- t(counts)
transposed_counts
counts <- read.csv("591_proj_counts.csv",row.names = 1)
#counts
transposed_counts <- t(counts)
head(transposed_counts)
counts <- read.csv("591_proj_counts.csv")
#counts
transposed_counts <- t(counts)
head(transposed_counts)
counts <- read.csv("591_proj_counts.csv")
# Extract the row where "ENSG00000000003.10" is in the "Column1" column
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Print or use the extracted row as needed
print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Extract the row where "ENSG00000000003.10" is in the "Column1" column
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
transposed_row <- t(desired_row)
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Extract the row where "ENSG00000000003.10" is in the "Column1" column
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
transposed_row <- t(desired_row)
# Print or use the transposed row as needed
transposed_row
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Extract the row where "ENSG00000000003.10" is in the "Column1" column
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
transposed_row <- t(desired_row)
# Print or use the transposed row as needed
#transposed_row
type(transposed_row)
row_type <- typeof(transposed_row)
View(desired_row)
row_class <- class(transposed_row)
row_class <- class(counts)
counts <- read.csv("591_proj_counts.csv")
# Extract the row where "ENSG00000000003.10" is in the "Column1" column
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row))
# Print or use the transposed row as needed
transposed_row
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Assuming desired_row is initially a data frame
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as the header
transposed_row <- data.frame(t(desired_row[-1,]))
colnames(transposed_row) <- desired_row$Column1
counts <- read.csv("591_proj_counts.csv")
# Assuming desired_row is initially a data frame
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as the header
transposed_row <- data.frame(t(desired_row[-1,]))
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Assuming desired_row is initially a data frame
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as the header
transposed_row <- data.frame(t(desired_row))
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as the header
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
# Set the first row as the header
colnames(transposed_row) <- transposed_row[1, ]
# Remove the first row (which is now redundant as a header)
transposed_row <- transposed_row[-1, ]
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as the header
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
# Set the first row as the header
colnames(transposed_row) <- transposed_row[1, ]
# Remove the first row (which is now redundant as a header)
transposed_row <- transposed_row[-1, ]
# Print or use the transposed row as needed
transposed_row
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
# Set the first row as the header
colnames(transposed_row) <- transposed_row[1, ]
# Remove the first row (which is now redundant as a header)
transposed_row <- transposed_row[-1, ]
# Convert columns to appropriate data types if needed
transposed_row[] <- lapply(transposed_row, type.convert, as.is = TRUE)
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
# Set the specific value as the header
colnames(transposed_row) <- c("ENSG00000000003.10")
# Remove the first row (which is now redundant as a header)
transposed_row <- transposed_row[-1, ]
# Convert columns to appropriate data types if needed
transposed_row[] <- lapply(transposed_row, type.convert, as.is = TRUE)
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
desired_column_name <- "NewColumnName"
colnames(transposed_row) <- c("Identifier", desired_column_name)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
desired_column_name <- "NewColumnName"
colnames(transposed_row) <- desired_column_name
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- desired_column_name
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- c("sample"",desired_column_name)
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- as.data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- c("sample",desired_column_name)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- data.frame(t(desired_row[, -1]))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- c("sample", desired_column_name)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- data.frame(t(desired_row))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- c("sample", desired_column_name)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- data.frame(t(desired_row))  # Exclude the first column if it's an identifier
desired_column_name <- "ENSG00000000003.10"
colnames(transposed_row) <- c(desired_column_name)
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame
transposed_row <- data.frame(t(desired_row))  # Exclude the first column if it's an identifier
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as header
transposed_row <- data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
names(transposed_row) <- desired_row$Column1
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Merge based on the Sample.ID column
merged_data <- merge(sample, transposed_row, by.x = "Sample.ID", by.y = "row.names", all.x = TRUE)
# Set the row names as Sample.ID and remove the unnecessary column
rownames(merged_data) <- merged_data$Sample.ID
merged_data <- merged_data[, -1]
# Print or use the merged data as needed
print(merged_data)
# Merge based on the Sample.ID column
merged_data <- merge(sample, transposed_row, by.x = "Sample.ID", by.y = "row.names", all.x = TRUE)
# Set the row names as Sample.ID and remove the unnecessary column
rownames(merged_data) <- merged_data$Sample.ID
#merged_data <- merged_data[, -1]
# Print or use the merged data as needed
print(merged_data)
# Merge based on the Sample.ID column
merged_data <- merge(sample, transposed_row, by.x = "Sample.ID", by.y = "row.names", all.x = TRUE)
# Set the row names as Sample.ID and remove the unnecessary column
rownames(merged_data) <- merged_data$Sample.ID
merged_data <- merged_data[, -1]
# Print or use the merged data as needed
print(merged_data)
runApp()
runApp()
runApp()
runApp()
sample <- read.csv("591_metadata.csv")
sample
# Read the CSV file
# Read the CSV file
counts <- read.csv("591_proj_counts.csv")
# Assuming you want to select a row where the value in "Column1" is "ENSG00000000003.10"
desired_row <- counts[counts$Column1 == "ENSG00000000003.10", ]
# Transpose the desired_row data frame and set the first row as header
transposed_row <- data.frame(t(desired_row[-1]))  # Exclude the first column if it's an identifier
names(transposed_row) <- desired_row$Column1
# Print or use the transposed row as needed
print(transposed_row)
# Print or use the extracted row as needed
#print(desired_row)
# Merge based on the Sample.ID column
merged_data <- merge(sample, transposed_row, by.x = "Sample.ID", by.y = "row.names", all.x = TRUE)
# Set the row names as Sample.ID and remove the unnecessary column
rownames(merged_data) <- merged_data$Sample.ID
merged_data <- merged_data[, -1]
# Print or use the merged data as needed
print(merged_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(merged_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Specify the file path
library(fgsea)
# Specify the file path
BiocManager::install("fgsea")
# Specify the file path
install.packages("BiocManager")
# Read the data into a data frame
# Specify the file path
BiocManager::install("fgsea")
shiny::runApp()
